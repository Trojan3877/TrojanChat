Trojan-CHAT/public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trojan CHAT</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="auth-container">
        <h2>Login to Trojan CHAT</h2>
        <input type="text" id="username" placeholder="Username" required>
        <input type="password" id="password" placeholder="Password" required>
        <button onclick="login()">Login</button>
        <p id="auth-error" style="color: red;"></p>
    </div>

    <div id="chat-container" style="display: none;">
        <h2>Trojan CHAT - <span id="current-user"></span> <button onclick="logout()">Logout</button></h2>
        <div id="message-history"></div>
        <div id="chat-box"></div>
        <input type="text" id="message-input" placeholder="Type a message..." onkeypress="if(event.key === 'Enter') sendMessage()">
        <button onclick="sendMessage()">Send</button>
    </div>

    <script src="chat.js"></script>
</body>
</html>

Trojan-CHAT/public/styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f0f0f0;
}

#auth-container, #chat-container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
    margin-top: 0;
}

input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

#message-history {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
    background-color: #f9f9f9;
}

#chat-box {
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
    min-height: 50px;
}

.message {
    margin: 5px 0;
}

.message .sender {
    font-weight: bold;
    color: #007bff;
}

Trojan-CHAT/public/chat.js
let ws = null;
let currentUser = null;

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    if (username && password) {
        fetch('/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentUser = username;
                document.getElementById('auth-container').style.display = 'none';
                document.getElementById('chat-container').style.display = 'block';
                document.getElementById('current-user').innerText = username;
                connectWebSocket();
                loadMessageHistory();
            } else {
                document.getElementById('auth-error').innerText = 'Invalid credentials';
            }
        });
    }
}

function logout() {
    currentUser = null;
    ws.close();
    document.getElementById('auth-container').style.display = 'block';
    document.getElementById('chat-container').style.display = 'none';
    document.getElementById('message-history').innerHTML = '';
}

function connectWebSocket() {
    ws = new WebSocket(`ws://localhost:3000?username=${currentUser}`);
    ws.onopen = () => console.log('Connected to WebSocket');
    ws.onmessage = (event) => {
        const message = JSON.parse(event.data);
        displayMessage(message);
    };
    ws.onclose = () => console.log('Disconnected from WebSocket');
}

function sendMessage() {
    const input = document.getElementById('message-input');
    const message = input.value.trim();
    if (message && ws && ws.readyState === WebSocket.OPEN) {
        const messageData = { sender: currentUser, content: message, timestamp: new Date().toISOString() };
        ws.send(JSON.stringify(messageData));
        input.value = '';
    }
}

function displayMessage(message) {
    const chatBox = document.getElementById('chat-box');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message';
    messageDiv.innerHTML = `<span class="sender">${message.sender}:</span> ${message.content} <small>(${new Date(message.timestamp).toLocaleTimeString()})</small>`;
    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function loadMessageHistory() {
    fetch('/messages')
        .then(response => response.json())
        .then(messages => {
            const historyDiv = document.getElementById('message-history');
            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.innerHTML = `<span class="sender">${message.sender}:</span> ${message.content} <small>(${new Date(message.timestamp).toLocaleTimeString()})</small>`;
                historyDiv.appendChild(messageDiv);
            });
            historyDiv.scrollTop = historyDiv.scrollHeight;
        });
}

Trojan-CHAT/src/server.js
const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const { authenticateUser } = require('./auth');
const { saveMessage, getMessages } = require('./messageStore');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

app.use(express.static('public'));
app.use(express.json());

// Mock user database
const users = [
    { username: 'user1', password: 'pass1' },
    { username: 'user2', password: 'pass2' }
];

// Login endpoint
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    const success = authenticateUser(users, username, password);
    res.json({ success });
});

// Get message history
app.get('/messages', (req, res) => {
    res.json(getMessages());
});

// WebSocket handling
wss.on('connection', (ws, req) => {
    const username = new URLSearchParams(req.url.split('?')[1]).get('username');
    console.log(`${username} connected`);

    ws.on('message', (data) => {
        const message = JSON.parse(data);
        saveMessage(message);
        wss.clients.forEach(client => {
            if (client.readyState === WebSocket.OPEN) {
                client.send(JSON.stringify(message));
            }
        });
    });

    ws.on('close', () => console.log(`${username} disconnected`));
});

server.listen(3000, () => console.log('Server running on http://localhost:3000'));

Trojan-CHAT/src/auth.js
function authenticateUser(users, username, password) {
    return users.some(user => user.username === username && user.password === password);
}

module.exports = { authenticateUser };

Trojan-CHAT/src/messageStore.js
let messages = [];

function saveMessage(message) {
    messages.push(message);
    if (messages.length > 100) messages.shift(); // Keep only the last 100 messages
}

function getMessages() {
    return messages;
}

module.exports = { saveMessage, getMessages };

Trojan-CHAT/package.json
{
    "name": "trojan-chat",
    "version": "1.0.0",
    "description": "A real-time chat application",
    "main": "src/server.js",
    "scripts": {
        "start": "node src/server.js"
    },
    "dependencies": {
        "express": "^4.18.2",
        "ws": "^8.14.2"
    }
}

Trojan-CHAT/README.md
# Trojan CHAT

A real-time chat application built with HTML, JavaScript, and Node.js.

## Features
- User authentication (mock login/logout)
- Real-time messaging using WebSocket
- Message history (stored in-memory)
- Basic UI with CSS styling

## Setup
1. Clone the repository: `git clone <your-repo-url>`
2. Navigate to the project directory: `cd Trojan-CHAT`
3. Install dependencies: `npm install`
4. Start the server: `npm start`
5. Open `http://localhost:3000` in your browser.

## Development Notes
- Currently uses an in-memory message store; replace with a database for production.
- Not yet deployed; intended for local development.

## Next Steps
- Add a database (e.g., MongoDB) for persistent message storage.
- Implement user registration.
- Enhance security (e.g., hash passwords, add JWT).
